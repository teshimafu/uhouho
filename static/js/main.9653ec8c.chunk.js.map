{"version":3,"sources":["Convertor.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Convertor","Object","classCallCheck","this","createClass","key","value","input","search","text","g","ans","dictionary","randomDict","Math","floor","random","length","うほ","ウホ","うっほ","ウッホ","ゴリラ","ごりら","うほうほ","ウホウホ","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","change","resp","convertor","state","setState","answer","_this2","react_default","a","createElement","className","style","textDecorationLine","type","onChange","e","target","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAMaA,SAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAA,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,OAAAK,IAAA,YAAAC,MAAA,SAC4BC,GAEpB,GAAIA,EAAMC,OAAO,+EACb,MAAO,CAAEC,KAAM,+GAAsBC,GAAG,GAC5C,IAAIC,EAAMR,KAAKS,WAAWL,GAI1B,OAHKI,IACDA,EAAMR,KAAKU,WAAWC,KAAKC,MAAMD,KAAKE,SAAWb,KAAKU,WAAWI,UAE9D,CAAER,KAAME,OATvBX,EAAA,IAAaA,EAYOY,WAAwC,CACpDM,eAAM,2BACNC,eAAM,eACNC,qBAAO,2BACPC,qBAAO,qBACPC,qBAAO,qBACPC,qBAAO,qBACPC,2BAAQ,+DACRC,2BAAQ,gEApBHzB,EAuBOa,WAAuB,CACnC,+DACA,uCACA,yDACA,mDACA,mDACA,0ECCOa,cA/Bb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAA3B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACtBE,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAE,KAAAF,OAAA6B,EAAA,EAAA7B,CAAAyB,GAAAK,KAAA5B,KAAMwB,KAGAK,OAAS,WACf,IAAIC,EAAOjC,EAAUkC,UAAUN,EAAKO,MAAM1B,MAC1CmB,EAAKQ,SAAS,CAAEC,OAAQJ,EAAKxB,KAAMC,EAAGuB,EAAKvB,KAJ3CkB,EAAKO,MAAQ,CAAE1B,KAAM,IAFCmB,wEAQf,IAAAU,EAAAnC,KACP,OACEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,iDAAUF,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEC,mBAAoB,iBAAnC,gBAAV,uBAEFL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOvC,MAAOH,KAAKgC,MAAM1B,KAAMqC,SAAU,SAACC,GAAD,OAAOT,EAAKF,SAAS,CAAE3B,KAAMsC,EAAEC,OAAO1C,WAC3FiC,EAAAC,EAAAC,cAAA,UAAQQ,QAAS9C,KAAK6B,QAAtB,sBACC7B,KAAKgC,MAAME,QACVE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,WAAMtC,KAAKgC,MAAME,QAChBlC,KAAKgC,MAAMzB,GAAK6B,EAAAC,EAAAC,cAAA,iLAvBbS,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9653ec8c.chunk.js","sourcesContent":["\r\ntype Resp = {\r\n    text: string,\r\n    g?: boolean;\r\n}\r\n\r\nexport class Convertor {\r\n    public static convertor(input: string): Resp {\r\n\r\n        if (input.search(/^[うほっウホッゴリラごりら]/))\r\n            return { text: \"おまえ本当にゴリラか？ゴリラ語喋れよ\", g: true };\r\n        let ans = this.dictionary[input];\r\n        if (!ans) {\r\n            ans = this.randomDict[Math.floor(Math.random() * this.randomDict.length)];\r\n        }\r\n        return { text: ans };\r\n    }\r\n\r\n    static readonly dictionary: { [key: string]: string } = {\r\n        \"うほ\": \"おはよう\",\r\n        \"ウホ\": \"やあ\",\r\n        \"うっほ\": \"やっほー\",\r\n        \"ウッホ\": \"元気？\",\r\n        \"ゴリラ\": \"トミヤ\",\r\n        \"ごりら\": \"トミヤ\",\r\n        \"うほうほ\": \"ボルダリング行こうぜ\",\r\n        \"ウホウホ\": \"ボルダリング行こうぜ\",\r\n    }\r\n\r\n    static readonly randomDict: string[] = [\r\n        \"ボルダリング行こうぜ\",\r\n        \"なんだてめえ\",\r\n        \"最近雨が多いですね\",\r\n        \"好きなタイプは？\",\r\n        \"ちんぽは本当に神\",\r\n        \"最近恋ゴリラができたわ\"\r\n    ];\r\n}","import React from 'react';\nimport './App.css';\nimport { Convertor } from './Convertor';\n\nclass App extends React.Component<{}, { text: string, answer?: string, g?: boolean }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { text: \"\" }\n  }\n  private change = () => {\n    let resp = Convertor.convertor(this.state.text);\n    this.setState({ answer: resp.text, g: resp.g });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>ゴリラ語変換<span style={{ textDecorationLine: 'line-through' }}>クソ</span>ツール</h1>\n        </header>\n        <div>\n          <h3>ゴリラ語を入れてね？</h3>\n          <input type=\"text\" value={this.state.text} onChange={(e) => this.setState({ text: e.target.value })}></input>\n          <button onClick={this.change}>変換！</button>\n          {this.state.answer &&\n            <div>\n              <div>翻訳結果</div>\n              <div>{this.state.answer}</div>\n              {this.state.g && <div>※う,ほ,ウ,ホ,っ,ッ,ゴ,リ,ラ以外を使うと怒られちゃうぞ♡</div>}\n            </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}